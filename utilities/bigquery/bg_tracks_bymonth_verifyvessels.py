import argparse

import googleapiclient
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from oauth2client.client import GoogleCredentials
from datetime import datetime
import json

#ranges of the years
year_range = [2015]
month_range =[i for i in range(1,13)]

# Grab the application's default credentials from the environment.
credentials = GoogleCredentials.get_application_default()
# Construct the service object for interacting with the BigQuery API.
bigquery_service = build('bigquery', 'v2', credentials=credentials)



vessels = [412427846,412462570,412215135,273892200,271010494,245962000,251467110,525015910,413977285,657876000,238117440,574002880,563968000,265634990,441879000,725001930,205269190,520176000,525017072,200008125,657526000,440995000,412422162,775996490,412440372,701000515,211477750,525019635,412349147,412420927,345070350,316013415,367090490,111503019,701000516,416303000,416168500,725000990,440216000,413328727,577188000,263325000,412328793,725000769,461000147,273899000,235082878,725002850,247112500,416004566,273410900,240107000,212764000,412328765,416306451,725001320,273815900,345070332,273352930,701006445,265570780,441201183,369493667,357124000,657350000,200008124,227262770,701006149,657123000,441410000,441559000,345070301,412687180,577145000,657115500,416349000,265531630,412006589,577191000,657523000,412420846,635000390,440120880,224282000,257692000,273311220,441298000,701000607,701006060,775996365,412328761,701000932,525005047,212936000,273343920,355750000,576025000,235112419,312356000,247114000,440683000,775996600,265636510,416067700,200000676,345010057,412460029,775996349,345070127,725002840,412420874,345050015,257179240,345070271,657606000,701000882,240303270,701000662,273842510,412423848,538002884,366981750,775996559,701007022,701006204,657105300,412460001,273810110,725000620,372702000,257177340,441412000,226004000,701000753,701000899,576394000,701000713,701000717,412331014,253375000,273348020,367300160,345070209,730999012,273345620,367637910,441007000,538005827,416180500,775996595,273135900,412331026,273421800,441303000,412440237,226004620,224093550,227547590,657810000,273561700,416368000,366902270,306851000,441766000,235095893,416168600,412331052,775328000,775996519,416234600,319117000,775996514,366889830,265651360,416338000,258120120,779956195,345070073,367631560,269101150,775996410,345070341,441784000,412324134,273899300,413827486,343981431,412209076,366986810,440684000,366172000,273814900,412328755,412460662,725000638,403400110,413804033,235103405,441219878,412885607,412321229,345070238,701000916,251734110,273822210,440100000,412428488,367447520,345050018,273876000,525019639,378112028,244830115,273336810,273842800,416084500,657981000,701006034,701000919,273310630,775996573,431999517,316001152,601139400,273825200,701006073,345070074,775996373,657216000,273829310,635016400,701000960,440502000,201309068,227908000,412328759,273890100,257105840,272208000,412687110,775996610,416003756,6477300,273351500,525018339,273297100,273358840,775996211,775996061,412324229,257303040,412349196,403403310,775996539,273344030,265565600,440662000,345070352,224084460,657521000,235113724,412333514,244179000,273445310,345050025,993310001,441699000,412214196,701000562,416102500,412375060,265585440,412420928,310340000,273349420,775996503,412428786,525018214,273845500,412412377,412420852,412324158,657123500,319034800,440201000,701000626,576477000,366888840,412432369,273516500,657118600,345070196,247050630,576609000,412821000,375847000,247071170,725000255,273824810,441330000,214180601,701000884,635000320,701000528,412441362,227317030,273825110,412438419,345070154,369970633,413763780,273292400,416000411,366965960,412410422,345030055,257175440,412460735,273454800,273849000,441201727,227635470,775996555,412425978,273219300,232354000,367168450,413802916,345070344,412331051,441868000,273445450,247169200,316014090,247211300,412694520,334829000,247030470,247083280,247092380,273315360,701000880,316021004,247070800,613778000,657268000,412695770,431600660,248023000,701000627,273355070,574332000,412205616,412069366,257261000,273873400,224612680,312206000,657031000,235110355,331277000,412433935,247120130,416001309,345070225,667001298,373644000,247083940,775000161,367569060,338175441,226007370,412324205,227127700,273312510,367418650,461000080,441201729,412522506,412433436,273421300,273840810,657744000,800019055,413990724,273421640,345070211,403899765,636016810,431701780,345070203,273431690,775000207,576690000,316016342,413363660,374676000,367045440,273421810,477995048,412324611,800022418,345070226,273842020,525008038,412421354,214182603,312275000,412436521,440008070,263401440,412323838,412412391,345070331,412428369,525005054,413304960,416842000,345070190,412470422,309275000,367662450,657124100,367655380,416204250,477092000,412324174,415000787,235003471,775996299,273899100,235079986,413081079,263359000,775996409,235061167,316002104,775996204,710447000,412428532,227153460,775996487,657107800,273353880,412695760,412324144,412371208,413766109,412420435,272135100,657122900,273148710,247071010,247071020,775996310,247030200,257377500,412333666,417222390,775996358,247141960,413882303,227977000,413200450,257632500,412450017,200001490,701000506,657950000,413507940,227808000,367489570,345070330,416222700,412320010,538070811,375372000,245946000,413033315,413045180,247144290,345070086,740380000,461000168,247050760,224050140,273456410,440548000,345070299,227273930,273845610,635000770,701000742,273290400,273827030,273357560,412462130,664301100,745005400,345070146,416238600,412442316,247092780,247092320,775000167,419000700,412383838,227262540,345090003,412432073,775996515,227138700,413818825,416000183,247050740,416528000,345050055,275141000,413815323,657110700,273211800,345070030,247081270,224572000,413994856,273559400,303267000,231751000,273441610,273358010,413377184,441360000,319031700,247149280,572911000,309669000,273550500,367702240,413219000,999999992,412423606,412438672,775996621,412205623,725001970,613123456,271062070,657111061,677024100,273429220,273437810,311000241,224590680,247083230,238017240,273847910,701006059,347008770,657122700,367413270,412468899,247052710,701000674,356039000,229225000,226000310,440135390,701000800,564014000,247050220,247090950,538070403,273212500,415046205,247092390,316111000,366435740,701000696,201851,412432263,431600092,345050051,657111053,412349341,273218900,244770417,273398300,657664000,412433259,412423191,273358560,237616000,775996549,98310295,338205000,273442270,273427000,412412445,657599000,525005009,412324138,412423275,316024306,250001172,412324532,251800840,200014199,273516600,445044000,576513000,235088014,412421420,565906000,413979809,412417322,413964829,224167120,247092750,258501710,413779513,412449716,227118500,238972240,412441958,247121360,345070250,413801945,273848100,416018900,356055000,247041670,657153000,412444799,503792100,273351740,257146640,613223456,371258000,224239920,273567010,412420955,372902000,366989360,247084790,263270000,416164900,657416000,316004862,657121400,209229000,412333529,257004010,997752589,345070276,235022604,775996608,247051790,247076010,271010383,412412431,412326879,273894200,273894710,412412501,657620000,745004600,627999990,657715000,273370750,412427982,413305080,538004085,503650900,701000686,273431520,701000658,338122714,412418812,247101370,413850351,735058769,273846610,635000580,345070237,238309540,523145236,413422073,273353030,211250470,331114000,273341320,235273000,227318890,273275200,273347500,413435070,247303280,247124560,775996281,412422166,412437054,345070228,413765908,770576272,657520000,413793113,413806549,563030680,263408240,13060,775996562,412448817,273451570,235038764,775996333,211530000,413358140,375466000,244672000,273825520,273897100,457068000,376767000,775996336,412439599,265635420,775996615,441201732,247099360,366898520,412215287,657905000,525003328,412447546,345070070,228336000,247049360,207829660,412280982,247092810,657113800,200014205,730077000,412412153,277512000,412412439,412426322,657115700,563065000,273559500,238752140,366980690,273890710,273373840,412498765,412432109,247110810,525018224,265662130,657539000,224313420,250000446,16589,412439392,247141940,4749,412412002,373145000,263401790,657718000,565090000,413775003,412324109,205999995,412377360,247080770,247091110,224012990,345070233,345070186,412361910,227318120,244529000,412423841,275448000,366779440,200006733,277030000,413001495,247255060,413763957,413794336,244710058,412430177,273539310,657107600,701006094,775996554,273438080,6459027,247084290,503023640,657103400,367347070,800060618,413364610,366760670,441565000,247093030,227270090,412460007,412205485,227275010,273374480,565119000,210642000,431006631,224180370,211444390,775996260,428999909,413900364,367691840,261455000,257908000,412023030,412422182,345030059,412358640,276672000,412413042,412449305,412222338,352134000,576188000,412435852,237698000,244740857,367530760,413817449,367037960,227317410,525006278,247100590,775996597,412325149,413050030,257570500,412349168,453000028,775996565,775996613,657660000,999999993,710019480,412410218,457192000,247080960,247081670,273415200,345010062,273295700,657106400,553111655,273829110,273898100,247087020,211627240,725000317,238498140,259798000,434562543,412349322,273353550,420313000,548061100,261003990,900403382,416004887,413482370,657472000,271072240,227319490,520145000,412422592,701000949]

for mmsi in vessels:
	# t = '1420156800'
	# t= int(float(t))
	# t = datetime.utcfromtimestamp(t)

	# print t
	# print str(t)
	# t = datetime(2015,1,1)
	# print t.total_seconds()


	try:
	    query_request = bigquery_service.jobs()
	    query_data = {
	        'query': (
	            '''SELECT
					  latitude,
					  longitude,
					  timestamp,
					  sog
					FROM
					   [scratch_david.GFW_Classification_Jan4_2016]
					WHERE
					  mmsi ='''+str(mmsi)+'''
					  AND latitude>-90
					  AND latitude<90
					  AND longitude !=0
					  AND latitude IS NOT null
					  AND longitude IS NOT NULL
					  AND timestamp IS NOT NULL
					  AND sog is NOT NULL
					ORDER BY
					  timestamp ;''')
	    }

	    query_response = query_request.query(
	        projectId='world-fishing-827',
	        body=query_data).execute()

	    sogs =[]
	    timestamps = []
	    lats = []
	    lons = []
	    
	    print('Query Results:')
	    if 'rows' in query_response:
		    for row in query_response['rows']:
		    	#print row['f'][0]['v']
		        lat = round(float(row['f'][0]['v']),5)
		        lon = round(float(row['f'][1]['v']),5)
		        sog = round(float(row['f'][3]['v']),1)
		        t = int(float(row['f'][2]['v']))
		        timestamp = datetime.utcfromtimestamp(t)
		        sogs.append(sog)
		        lats.append(lat)
		        lons.append(lon)
		        timestamps.append(timestamp)
		        #print('\t'.join(field['v'] for field in row['f']))

	except HttpError as err:
	    print('Error: {}'.format(err.content))
	    raise err

	for y in year_range:
		for m in month_range:
			m_lats = []
			m_lons = []
			m_sogs = []
			m_timestamps = []
			for i in range(len(lats)):
				if timestamps[i].month == m and timestamps[i].year == y:
					m_lats.append(lats[i])
					m_lons.append(lons[i])
					m_timestamps.append(str(timestamps[i]))
					m_sogs.append(sogs[i])


			if len(m_lats)>100: #has to have at least 100 positions in the month
			    # zeros = 0.
			    # for i in range(len(m_sogs)):
			    # 	if m_sogs[i]==<.1:
			    # 		zeros+=1
			    # if zeros / len(m_sogs) <.3:


				js = {}
				js['lats']=m_lats
				js['lons']=m_lons
				js['sogs']=m_sogs
				js['timestamps']=m_timestamps
				# js['type'] = "LineString"
				# js['coordinates'] = [[round(lon,5),round(lat,5)] for lat,lon in zip(lats,lons)] #stupid to have higher than 5 digets
				t = json.dumps(js)
				f = open("../../data/vessels/"+str(mmsi)+"_"+str(y)+"_"+str(m)+".json",'w')
				f.write(t)
				f.close()
			else:
				print "no values for "+str(mmsi) + " on "+str(y)+ "-"+str(m)

